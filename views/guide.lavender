extends layouts/default

-current_page = 'Guide'

block title
  | Guide - Lavender Templating Engine for PHP

block content
  .container
    div.col-md-3
      .sidebar.guide.img-rounded(
        data-spy='affix', 
        data-offset-top='60',
        data-offset-bottom='200'
        )
        h3 Navigation
        h2 Installation
        ul
          li
            a(href='#composer') via Composer
          li
            a(href='#github') via GitHub
          li
            a(href='#usage') Usage
        h2 Language Reference
        ul
          li
            a(href='#html') html
          li
            a(href='#doctype') doctype 
          li
            a(href='#comments') comments         
          li
            a(href='#concomments') conditional comments
          li
            a(href='#variables') variables
          li
            a(href='#conditionals') conditionals
          li
            a(href='#loops') loops 
          li
            a(href='#else') else
          li
            a(href='#math') math
          li
            a(href='#include') include
          li
            a(href='#extends') extends
          li
            a(href='#whitespace') whitespace
          li
            a(href='#helpers') helpers
          li
            a(href='#filters') filters
    div.col-md-8
      .guide.img-rounded
        h1.title The Lavender Guide
        p
          | Hey! We're here to teach you about Lavender. If you know Jade, you'll 
          | find this easier to pick up. If not, take your time and learn! Yay!
        h3 Installation
          h2#composer via composer
          p
            | First, get yourself some 
            a(
              href='https://getcomposer.org/doc/00-intro.md#installation-nix', 
              target='_blank'
            ) composer.
            |  Next, you need to make yourself a
            code composer.json
            | , here's an example.
            pre
              code.
                {
                  'require': {
                    'lavender/lavender': '*'
                  }
                }
            | then run
            code php composer.phar install 
            | or
            code composer install
            | depending on how you've installed composer. Once composer has finished 
            |it will generate an autoloader in 
            code vendor/autoload.php
            | which you can 
            code require()
            | from your application's bootstrap process.
          h2#github via Github      
          p
            | Add the lavender submodule with 
            code git submodule add git@github.com:golavender/lavender.git (folder to 
            | clone to) and include it with 
            code require '(where you put lavender)/src/Lavender/lavender.php'   
        h3#usage Usage     
        p
          | Once you have installed and included lavender, the only required 
          | configuration is to tell lavender where the views directory is.
          pre
            code.
              Lavender::config(array(

              /*
               * required - path to views directory
               */
              'view_dir'       => String,

              /*
              * optional - defaults to 'lavender'
              */
              //'file_extension' => String,

              /*
              * optional - defaults to TRUE
              *
              * renders a debugging error page instead of throwing an exception.
              * in production you should disable this and use a 500 page.
              */
              //'handle_errors'  => Boolean, 
              ));
          | once it's been rendered, it's as easy as...
          pre
            code.
              $output = Lavender::view('some_template')->compile();

              // or if you need to pass data into the template (probably the case)

              $output = Lavender::view('some_template')->compile(array(
                'data'      => 'some data that the template will use',
                'more_data' => 'moar data',
              ));
        h3#langref Language Reference
          h2#html html
          p
            pre
              code.
                section#some_id.foo.bar(attribute1='foo',attribute2='bar')
            | becomes
            pre
              code.
                &lt;section id='some_id' class='foo bar' attribute1='foo' 
                attribute2='bar'&gt;&lt;/section&gt;
            | Child nodes are indented below their parent
            pre
              code.
               section.foo
                div(data-something='foo') 
                div(data-something='bar')
            | becomes
            pre
              code.
                &lt;section class='foo'&gt;
                  &lt;div data-something='foo'&gt; &lt;/div&gt;
                  &lt;div data-something='bar'&gt; &lt;/div&gt;
                &lt;/section&gt;
            | There is a shortcut if you just want a div, you can skip right to class 
            | or id definitions.
            pre
              code.
                .foobar text text
                #foobar text text
            | becomes
            pre
              code.
                &lt;div class='foobar'&gt;text text&lt;/div&gt;
                &lt;div id='foobar'&gt;text text&lt;/div&gt;   
            | Text can be added to nodes in two ways.
            pre
              code.
                section.foo
                  div(data-something='foo') this is some text 
                  div(data-something='bar')
                   | this is also some text          
            | Lavender knows not to put a closing tag on certain nodes. (we got the 
            | list from
            a(
              href='http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements', 
              target='_blank'
              ) here
            code input(type='text',value='fooooobar')
            | becomes
            code &lt;input type='text' value='fooooobar'&gt;
          h2#doctype doctype   
          p
            | Do you always forget the syntax for doctype? Lavender exists to solve 
            | your first world problems. Just throw a 
            code !!!
            |  at the top of your layout and you get yourself a nice 
            |       html doctype. Doctypes supported are 
            code html
            | , 
            code transitional
            | ,      
            code strict
            | , 
            code frameset
            | , 
            code 1.1
            | , 
            code basic
            |  and      
            code mobile
            | . Here are some pretty examples.  
            p
            code !!!
            |  will default to html, however you can also specify 
            code !!! html
            | . The word 
            code doctype
            |  works as well!
        h2#comments Comments
        p
          | comments are a thing!
          pre
            code.
              // this is an html comment. it will be rendered to the page
              //- this is a lavender comment. it will not be rendered
        h2#concomments Conditional Comments
        p
          | The 
          code IE
          | shorthand can be used to generate conditional comments for Internet 
          | Explorer. Check out 
          a(
            href='http://www.quirksmode.org/css/condcom.html', 
            target='_blank'
            ) this
          | if you are not familiar with conditional comments.
          pre
            code.
              IE
                script(src='some script to make IE work')
              IE lt 7
                script(src='some script to make super old IE work')
          | becomes
          pre
            code.
              &lt;!--[if IE]&gt;
                &lt;script src=&#39;some script to make IE work&#39;&gt;&lt;
                /script&gt;
              &lt;![endif]--&gt;
              &lt;!--[if lt IE 7]&gt;
                &lt;script src=&#39;some script to make super old IE work&#39;&gt;
                &lt;/script&gt;
              &lt;![endif]--&gt;
          h3#variables Variables
          p
            | Lavender views can be passed variables from the parent php application 
            | or they can be defined right in the template.
          p
            | This just assigns a variable without outputting anything to the page.
            pre 
              code.
               - some_variable = 'this is stored in a variable'
          p
            | Note the
            code -
            | symbol, which evaluates an expression without outputting. the content 
            | of the variable can then later be output using the 
              code. =
            | symbol.
            pre
              code.
                 - some_variable = 'this is stored in a variable'

                 span.foo= some_variable

                 span.bar
                   = some_variable
            | becomes
            pre
              code.
                &lt;span class=&#39;foo&#39;&gt;this is stored in a variable&lt;/div&gt;
                &lt;span class=&#39;bar&#39;&gt;this is stored in a variable&lt;/div&gt;
            | Arrays too
            code - some_array = ['foo', 'bar', 'baz']
            | and associative arrays
            code - some_array = {key1: 'foo', key2: 'bar', key3: 'baz'} 
          h3#conditionals Conditionals
          p
            | Markup can be conditionally rendered using the if keyword. Lavender 
            | supports all the 
            | conditional operations you know and love:
            code.
              !, &amp;&amp;, ||, &lt;, &gt;, &lt;=, &gt;=, ==, != 
            | and does a truthy check against the result.
            pre
              code.
                - some_variable = 'this is stored in a variable'

                if some_variable
                  span.foo= some_variable

                if some_variable_that_doesnt_exist
                  span.foo this won't be rendered

                if FALSE
                  div this isn't rendered
                elseif FALSE
                  div still not rendered
                elseif TRUE
                  div wooooooooo
                else
                  div sadface
          p
            | becomes
            pre
              code.
                &lt;span class=&#39;foo&#39;&gt;this is stored in a variable&lt;/div&gt;
                &lt;div&gt;wooooooooo&lt;/div&gt
            code TRUE
            | and
            code FALSE
            | (and
            code true
            | and
            code false
            | )
            | are keywords in Lavender, they can be assinged to variables or used in 
            | conditionals directly (but if you actually do that then
            a(
              href='https://www.destroyallsoftware.com/talks/wat', 
              target='_blank') wat
            | )
            pre
              code.
                - my_variable = TRUE

                if my_variable
                  div this will show up

                if false
                  div this will not
          h2#loops Loops
          p
            | Lavender supports iterating over arrays and associative arrays with the 
            code each
            | keyword
            pre
              code.
                 ul
                   each value in some_random_array
                     li= value 

                 ul
                   each value, key in some_random_array
                     li(data-key=key)= value 
            | You may have noticed how we snuck in using variables for your html 
            | attributes there. You can do that too!
          h2#else Else
          p
            | The else keyword can be used after loops or conditionals.
            pre
              code.
                  if FALSE
                  div will not show up
                else
                  div will show up

                - empty_array = []

                each value in empty_array
                  div nothing to see here
                else
                  div empty array!
          h2#math Math
          p
            | Math. You can do it. Supported operators are
            code %, +, -, *, /, (, )
            | .
            pre
              code.
                  = 1 + 1 = 
                  = 1 + 1

                div
                  | 2 - 3 = 
                  = 2 - 3

                div
                  | 2 * 3 = 
                  = 2 * 3

                div
                  | 10 / 5 = 
                  = 10 / 5
                
                ul
                  each value, key in some_random_array
                    if key % 2 == 0
                      li(data-key=key)= value 
          h2#include Include
          p
            | Partials are a thing.
            pre
              code.
                span stuff and things

                div.content
                  include /path/relative/to/view/directory/somefile

                div.content
                  include /path/relative/to/view/directory/somefile with {stuff: 'Asdfasdf'}
          h2#extends Extends
          p
            | Lavender supports block style layout extension. This means that in the 
            | parent template you define blocks using the
            code block
            | keyword. Then in the child template you
            b only have blocks
            | which override the blocks in the parent template.
          p
            |  So if this was layout.lavender..
            pre
              code.
                h1 this is a pretty cool web page

                block header
                  | you can put some default content in here
                  | it will be displayed if no child template
                  | overrides it

                div.content
                  block content
            | And this is the child template...
            pre
              code.
                extends layout

                block header
                  div
                    span
                      | foo bar baz

                block content
                  | content
                  | more content
                  | moar content
            | And you were to render the child template, you would get...
            pre
              code.
                 &lt;h1&gt;this is a pretty cool web page&lt;/h1&gt;

                 &lt;div&gt;
                   &lt;span&gt;foo bar baz&lt;/span&gt;
                 &lt;/div&gt;

                 &lt;div class=&#39;content&#39;&gt;
                   content
                   more content
                   moar content
                 &lt;/div&gt;
            | A special case has been added to allow defining variables at the top of 
            | your child templates, these variables can be referenced from the layout 
            | to do cool things like specifying a list of javascript files necessary 
            | for a template to work or setting the page title.
        h2#whitespace Whitespace
        p
          | New lines are added automatically after every html element, if you do not 
          | want the newline you can add a
          code -
          | to the node definition like so.
        pre
          code.
            p
            a(href=&#39;/some/place&#39;)- click here for some cool stuff
            |.
        | Automagic whitespace management is hard and subject to change.
        h2#helpers Helpers
        p
          | Helpers are used to streamline the process even more. A constant helper...
          pre
            code.
              class Lavender_Helper_Constant
              {
                public function execute($string)
                {
                  return constant($string);
                }
              }
              Lavender::register_helper('constant', 'Lavender_Helper_Constant');
          | And a date helper...
          pre
            code.
              class Lavender_Helper_Date
              {
                public function execute($format, $timestamp = NULL)
                {
                  if ($timestamp) {
                    return date($format, $timestamp);
                  }
                  else {
                    return date($format);
                  }
                }
              }
              Lavender::register_helper('date', 'Lavender_Helper_Date');
          | Are both available for use.
        h3#filters Filters
        p
          | Programatic expressions in Lavender are a little limited, none of your 
          | favorite php functions are available for modifying the template data. 
          | This is by design, we do not think there should be a ton of logic in 
          | templates when that logic could be in controllers or models. However, 
          | since you have to be able to do some templating logic, we added filters. 
          | It is super easy to add your own filters to Lavender and there are 
          | (or will be) plenty in place out of the box. Here is how they work...
          pre
            code.
              - myvariable = 'some really cool text'

              div
                span
                  | i'm gonna filter some stuff. it's gonna be cool. 
                  = myvariable | upper 
          | becomes
          pre
            code.
              &lt;div&gt;
                &lt;span&gt;im gonna filter some stuff, it&apos;ll be cool. SOME REALLY COOL TEXT&lt;/span&gt;
              &lt;/div&gt;
          | Profound right? Not that we invented this, we copied the idea from 
          a(href='http://twig.sensiolabs.org/', target='_blank') twig
          | . The filters Lavender comes with are:
        div.table-responsive  
          table.table.table-hover
              thead
                tr
                  th Filter
                  th Start
                  th Becomes
              tbody
                tr
                  td 
                    b upper
                  td 
                    code ='string'|upper
                  td 
                    code STRING
                tr
                  td 
                    b trim
                  td 
                    code =' string '|trim
                  td
                    code string
                tr
                  td
                    b title
                  td
                    code ='this is a title'|title
                  td
                    code This Is A Title
                tr
                  td
                    b split
                  td
                    code 'these are some words'|split(' ')
                  td
                    code ['these', 'are', 'some', 'words']
                tr
                  td
                    b sort
                  td
                    code 'these are some words'|split(' ')|sort
                  td
                    code ['are', 'some', 'these', 'words'] 
                tr
                  td
                    b capitalize
                  td
                    code = 'these are some words'|capitalize
                  td
                    code These are some words 
                tr
                  td
                    b date 
                  td
                    code = '1396372567'|date
                  td 
                    code 4/1/2014 = '1396372567'|date('Y')
                    | becomes
                    code 2014
                tr
                  td
                    b default 
                  td
                    code = []|default('foobar')
                  td
                    code foobar
                tr
                  td
                    b first
                  td
                    code = ['asdf','qwer']|first
                  td 
                    code asdf
                tr
                  td
                    b join
                  td
                    code = ['asdf','qwer']|join
                  td
                    code asdf qwer = ['asdf','qwer']|join('-')
                    | becomes
                    code asdf-qwer
                tr
                  td 
                    b last 
                  td
                    code = ['asdf','qwer']|last
                  td
                    code qwer = ['asdf','qwer', 'zxcv']|last(2)|join('-')
                    | becomes
                    code 'qwer-zxcv'
                tr
                  td 
                    b keys
                  td
                    code {'asdf': 'foo','qwer': 'bar'}|keys
                  td
                    code ['asdf', 'qwer']
                tr
                  td 
                    b length
                  td
                    code = ['asdf','qwer']|length
                  td             
                    code 2
                tr
                  td
                    b lower
                  td
                    code = 'FOO BAR'|lower
                  td
                    code foo bar
                tr
                  td 
                    b nl2br
                  td
                    code = 'new&bsol;nline'|nl2br
                  td
                    code new&lt;br&gt;line 
                tr
                  td 
                    b round
                  td
                    code = 12345.123|round(2)
                  td
                    code 12345.12
                tr
                  td 
                    b merge
                  td
                    code ['foo', 'bar']|merge(['baz'])
                  td
                    code ['foo', 'bar', 'baz']
                tr
                  td 
                    b replace
                  td
                    code = 'foo bar'|replace(' ', '-')
                  td
                    code foo-bar
                tr
                  td 
                    b reverse
                  td
                    code ['asdf', 'qwer']|reverse
                  td
                    code ['qwer', 'asdf']
                tr
                  td 
                    b slice 
                  td
                    code ['foo', 'bar', 'baz']|slice(1, 1)
                  td
                    code ['bar']
                tr
                  td 
                    b number_format
                  td
                    code = 10000000000.12345|number_format()
                  td
                    code 0,000,000,000 = 10000000000.12345|number_format(2, ',', '.')
                    | becomes
                    code 10.000.000.000,12
                tr
                  td 
                    b ceil 
                  td
                    code = 10000000000.12345|ceil
                  td
                    code 10000000001
                tr
                  td 
                    b floor
                  td
                    code = 10000000000.12345|floor
                  td
                    code 10000000000
                tr
                  td 
                    b relative
                  td
                    | if you had a
                    code timestamp
                    | variable
                  td
                    code timestamp|relative
                    | would return things like 'just now' or 'in 3 days' or
                    code 6 minutes ago
                tr
                  td 
                    b contains
                  td
                    code = ['asdf', 'qwer']|contains('asdf')
                  td
                    | returns TRUE
                tr
                  td 
                    b is
                  td
                    code = ['asdf', 'qwer']|is('list')
                  td
                    | returns TRUE
                tr
                  td 
                    |  
                  td
                    code = {asdf: 'qwer'}|is('object')
                  td
                    | returns TRUE
                tr
                  td 
                    |  
                  td
                    code = 8|is('number')
                  td
                     | returns TRUE
                tr
                  td 
                    |    
                  td
                    code = myVariable|is('My_Class_Name')
                  td
                    | also works.
                tr
                  td 
                    b json
                  td
                    code = ['asdf', 'qwer']|json
                  td
                    code '['asdf','qwer']'
                tr
                  td 
                    b round
                  td
                    code 3.6|round
                  td
                    code 4
                tr
                  td 
                    b floor
                  td
                    code 3.14|floor
                  td
                    code 3
                tr
                  td 
                    b chunk
                  td
                    code 'foo, bar, baz, qux'| chunk 2
                  td
                    code 'foo,bar' 'baz, qux'
                tr
                  td 
                    b range
                  td
                    code 5| range 11
                  td
                    code 5, 6, 7, 8, 9, 10, 11
  include layouts/footer