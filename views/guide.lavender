!!!

head
  title Guide Lavender Templating Engine for PHP
  meta(name='keywords', content='Lavender, Lavender programming language, lavenderlang, lavender-lang')
  meta(name='description', content='A templating engine for PHP, designed to make your life easier.')
  meta(name='viewport', content='width=device-width, initial-scale=1')
  link(rel='stylesheet', href='//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css')
  link(rel='stylesheet', href='css/main.css')
  link(rel='stylesheet', href='http://fonts.googleapis.com/css?family=Lato:300,700')
  link(rel='stylesheet', href='http://fonts.googleapis.com/css?family=Lily+Script+One')

body
	.container
		.btn-group.pull-right
			button.btn.btn-home.dropdown-toggle(type="button", data-toggle="dropdown") Menu
				span.caret
          ul.dropdown-menu
            li: a(href="/lavender.html", title="Home") Home
            li: a(href="https://github.com/golavender/lavender", title="GitHub") GitHub
            li: a(href="https://github.com/daftlabs", title="GitHub") Creators
            li.disabled: a(href="https://github.com/golavender/lavender", title="GitHub") Guide
            li: a(href="/about.html") About

    .guide.img-rounded
      h1.title The Lavender Guide
        p
          | Hey! We're here to teach you about Lavender. If you know Jade, you'll find this easier 
          | to pick up. If not, take your time and learn! If I can do this, then you'll be good to go!
      h2 Navigation
        ul.nav.nav-pills
          li.dropdown
            a.dropdown-toggle(data-toggle="dropdown-toggle", href="#") Installation
              span.caret
            ul.dropdown-menu(role="menu")
              li
                a(href="#composer") via Composer
              li
                a(href="#github") via GitHub
              li
                a(href="#usage") Usage
          li.dropdown
            a.dropdown-toggle(data-toggle="dropdown-toggle",href="#") Language Reference
              span.caret
            ul.dropdown-menu(role="menu")
              li
                a(href="#html") html
              li
                a(href="#doctype") doctype 
              li
                a(href="#comments") comments         
              li
                a(href="#concomments") conditional comments
              li
                a(href="#variables") variables
              li
                a(href="#conditionals") conditionals
              li
                a(href="#loops") loops 
              li
                a(href="#else") else
              li
                a(href="#math") math
              li
                a(href="#include") include
              li
                a(href="#extends") extends
              li
                a(href="#whitespace") whitespace
              li
                a(href="#filters") filters
      h2 Installation
        h3#composer via composer
          p
            | first, get yourself some composer. next, you need to make yourself a
            code.
              composer.json
            | , here's an example.
            pre
              code.
                  {
                    "require": {
                      "lavender/lavender": "*"
                    }
                  }
            | then run
            code.
              php composer.phar install 
            | or
            code.
              composer install
            | depending on how you've installed composer. Once composer has finished it will generate an 
            | autoloader in 
            code.
              vendor/autoload.php
            | which you can 
            code.
              require()
            | from your application's bootstrap process.
        h3#github via Github      
          p
            | Add the lavender submodule with 
            code.
              git submodule add git@github.com:golavender/lavender.git (folder to clone to) 
            | and include it with 
            code.
              require "(where you put lavender)/src/Lavender/lavender.php   
      h2#usage Usage     
        p
          | Once you have installed and included lavender, the only required configuration is to tell
          | lavender where the views directory is.
          pre
            code.
              Lavender::config(array(

              /*
               * required - path to views directory
               */
              'view_dir'       => String,

              /*
              * optional - defaults to "lavender"
              */
              //'file_extension' => String,

              /*
              * optional - defaults to TRUE
              *
              * renders a debugging error page instead of throwing an exception.
              * in production you should disable this and use a 500 page.
              */
              //'handle_errors'  => Boolean, 
              ));
            | once it's been renedered, it's as easy as...
            pre
              code.
                $output = Lavender::view('some_template')->compile();

                // or if you need to pass data into the template (probably the case)

                $output = Lavender::view('some_template')->compile(array(
                  'data'      => 'some data that the template will use',
                  'more_data' => "moar data",
                ));
      h2 Language Reference
        h3#html html
        p
          code.
            section#some_id.foo.bar(attribute1='foo',attribute2='bar')
          | becomes
          code.
            &lt;section id="some_id" class="foo bar" attribute1="foo" attribute2="bar"&gt;&lt;/section&gt;
          | Child nodes are indented below their parent
          pre
            code.
             section.foo
              div(data-something='foo') 
              div(data-something='bar')
          | becomes
          pre
            code.
              &lt;section class="foo"&gt;
                &lt;div data-something="foo"&gt; &lt;/div&gt;
                &lt;div data-something="bar"&gt; &lt;/div&gt;
              &lt;/section&gt;
          | There is a shortcut if you just want a div, you can skip right to class or id definitions.
          pre
            code.
              .foobar text text
              #foobar text text
          | becomes
          pre
            code.
              &lt;div class="foobar"&gt;text text&lt;/div&gt;
              &lt;div id="foobar"&gt;text text&lt;/div&gt;   
          | Text can be added to nodes in two ways.
          pre
            code.
              section.foo
                div(data-something='foo') this is some text 
                div(data-something='bar')
                 | this is also some text          
          | Lavender knows not to put a closing tag on certain nodes. (we got the list from
          a(href="http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements") here
          code.
            input(type="text",value="fooooobar")
          | becomes
          code.
            &lt;input type="text" value="fooooobar"&gt;
        h3#doctype doctype   
          p
            | Do you always forget the syntax for doctype? Lavender exists to solve your first world 
            | problems. Just throw a 
            code.
              !!!
            |  at the top of your layout and you get yourself a nice 
            |       html doctype. Doctypes supported are 
            code.
              html
            | , 
            code.
              transitional
            | ,      
            code.
              strict
            | , 
            code.
              frameset
            | , 
            code.
              1.1
            | , 
            code.
              basic
            |  and      
            code.
              mobile
            | . Here are some pretty examples.  
            p
            code.
              !!!
            |  will default to html, however you can also specify 
            code.
              !!! html
            | . The word 
            code.
              doctype
            |  works as well!
        h3#concomments Conditional Comments
          p
            | The 
            code.
              IT
            | shorthand can be used to generate conditional comments for Internet Explorer. check out 
            a(href="http://www.quirksmode.org/css/condcom.html") this 
            | if you are not familiar with conditional comments.
            pre
              code.
                IE
                  script(src="some script to make IE work")
                IE lt 7
                  script(src="some script to make super old IE work")
            | becomes
            pre
              code.
                &lt;!--[if IE]&gt;
                  &lt;script src=&quot;some script to make IE work&quot;&gt;&lt;/script&gt;
                &lt;![endif]--&gt;
                &lt;!--[if lt IE 7]&gt;
                  &lt;script src=&quot;some script to make super old IE work&quot;&gt;&lt;/script&gt;
                &lt;![endif]--&gt;
        h3#variables Variables
          p
            | Lavender views can be passed variables from the parent php application or they can be 
            | defined right in the template.
          p
            | This just assigns a variable without outputting anything to the page.
            code.
            - some_variable = "this is stored in a variable"
          p
            | Note the
            code.
              -
            | symbol, which evaluates an expression without outputting. the content of the variable can then
            | later be output using the 
              code.
                =
            | symbol.
            pre
              code.
                 - some_variable = "this is stored in a variable"

                 span.foo= some_variable

                 span.bar
                   = some_variable
            | becomes
            pre
              code.
                &lt;span class=&quot;foo&quot;&gt;this is stored in a variable&lt;/div&gt;
                &lt;span class=&quot;bar&quot;&gt;this is stored in a variable&lt;/div&gt;
            | arrays too
            code.
              - some_array = ['foo', 'bar', 'baz']
            | and associative arrays
            code.
              - some_array = {key1: 'foo', key2: 'bar', key3: 'baz'} 
        h3#conditionals Conditionals
          p
            | Markup can be conditionally rendered using the if keyword. Lavender supports all the 
            | conditional operations you know and love:
            code.
              !, &amp;&amp;, ||, &lt;, &gt;, &lt;=, &gt;=, ==, != 
            | and does a truthy check against the result.
            pre
              code.
                - some_variable = "this is stored in a variable"

                if some_variable
                  span.foo= some_variable

                if some_variable_that_doesnt_exist
                  span.foo this won't be rendered

                if FALSE
                  div this isn't rendered
                elseif FALSE
                  div still not rendered
                elseif TRUE
                  div wooooooooo
                else
                  div sadface
          p
            | becomes
            pre
              code.
                &lt;span class=&quot;foo&quot;&gt;this is stored in a variable&lt;/div&gt;
                &lt;div&gt;wooooooooo&lt;/div&gt
            code.
              TRUE
            | and
            code.
              FALSE
            | (and
            code.
              true
            | and
            code.
              false
            | )
            | are keywords in Lavender, they can be assinged to variables or used in conditionals directly
            | (but if you actually do that then
            a(href='https://www.destroyallsoftware.com/talks/wat') wat
            | )
            pre
              code.
                - my_variable = TRUE

                if my_variable
                  div this will show up

                if false
                  div this will not
        h3#loops Loops
          p
            | Lavender supports iterating over arrays and associative arrays with the 
            code.
             each
            | keyword
            pre
              code.
                 ul
                   each value in some_random_array
                     li= value 

                 ul
                   each value, key in some_random_array
                     li(data-key=key)= value 
            | You may have noticed how we snuck in using variables for your html attributes there. 
            | You can do that too!
        h3#else Else
          p
            | The else keyword can be used after loops or conditionals.
            pre
              code.
                  if FALSE
                  div will not show up
                else
                  div will show up

                - empty_array = []

                each value in empty_array
                  div nothing to see here
                else
                  div empty array!
        h3#math math
          p
            | Math. You can do it. Supported operators are
            code.
              %, +, -, *, /, (, )
            | .
            pre
              code.
                  = 1 + 1 = 
                  = 1 + 1

                div
                  | 2 - 3 = 
                  = 2 - 3

                div
                  | 2 * 3 = 
                  = 2 * 3

                div
                  | 10 / 5 = 
                  = 10 / 5
                
                ul
                  each value, key in some_random_array
                    if key % 2 == 0
                      li(data-key=key)= value 
        h3#include Include
          p
            | Partials are a thing.
            pre
              code.
                span stuff and things

                div.content
                  include /path/relative/to/view/directory/somefile

                div.content
                  include /path/relative/to/view/directory/somefile with {stuff: "Asdfasdf"}
        h3#extends Extends
          p
            | Lavender supports block style layout extension. This means that in the parent template
            | you define blocks using the
            code.
              block
            | keyword. Then in the child template you
            b only have blocks
            | which override the blocks in the parent template.
          p
            |  so if this was layout.lavender
            pre
              code.
                h1 this is a pretty cool web page

                block header
                  | you can put some default content in here
                  | it will be displayed if no child template
                  | overrides it

                div.content
                  block content
            | and this is the child template...
            pre
              code.
                extends layout

                block header
                  div
                    span
                      | foo bar baz


                block content
                  | content
                  | more content
                  | moar content
            | and you were to render the child template, you would get...
            pre
              code.
                 &lt;h1&gt;this is a pretty cool web page&lt;/h1&gt;

                 &lt;div&gt;
                   &lt;span&gt;foo bar baz&lt;/span&gt;
                 &lt;/div&gt;

                 &lt;div class=&quot;content&quot;&gt;
                   content
                   more content
                   moar content
                 &lt;/div&gt;
            | A special case has been added to allow defining variables at the top of your child 
            | templates, these variables can be referenced from the layout to do cool things like 
            | specifying a list of javascript files necessary for a template to work 
            | or setting the page title.
      h3#whitespace Whitespace
        p
          | New lines are added automatically after every html element, if you do not want the newline
          | you can add a
          code -
          | to the node definition like so.
          pre
            code.
              p
              a(href=&quot;/some/place&quot;)- click here for some cool stuff
              |.
        | Automagic whitespace management is hard and subject to change.
      h3#filters Filters
        p
          | Programatic expressions in Lavender are a little limited, none of your favorite php 
          | functions are available for modifying the template data. This is by design, we do not think 
          | there should be a ton of logic in templates when that logic could be in controllers or models. 
          | However, since you have to be able to do some templating logic, we added filters. It is super 
          | easy to add your own filters to Lavender and there are (or will be) plenty in place out of 
          | the box. here is how they work.
          pre
            code.
              - myvariable = "some really cool text"

              div
                span
                  | i'm gonna filter some stuff. it's gonna be cool. 
                  = myvariable | upper 
          | becomes
          pre
            code.
              &lt;div&gt;
                &lt;span&gt;im gonna filter some stuff, it&apos;ll be cool. SOME REALLY COOL TEXT&lt;/span&gt;
              &lt;/div&gt;
          | Profound right? Not that we invented this, we copied the idea from 
          a(href="http://twig.sensiolabs.org/") twig
          | . The filters Lavender comes with are:
        p
          ul.list-unstyled
            li
              b upper:
              code.
                ="string"|upper
              | becomes
              code.
                STRING
            li
              b trim:
              code.
                =" string "|trim
              | becomes
              code.
                string
            li
              b title:
              code.
                ="this is a title"|title
              | becomes
              code.
                This Is A Title 
            li
              b split:
              code.
                "these are some words"|split(' ')
              | becomes the array
              code.
                ['these', 'are', 'some', 'words'] 
            li
              b sort:
              code.
                "these are some words"|split(' ')|sort
              | becomes the array
              code.
                ['are', 'some', 'these', 'words'] 
            li
              b capitalize:
              code.
                = "these are some words"|capitalize
              | becomes
              code.
                These are some words 
            li
              b date:
              code.
                = "1396372567"|date
              | becomes
              code.
                4/1/2014 = "1396372567"|date('Y') 
              | becomes
              code.
                2014 
            li
              b default:
              code.
                = []|default('foobar')
              | becomes
              code foobar
            li
              b first:
              code.
                = ['asdf','qwer']|first
              | becomes
              code.
                asdf
            li
              b join:
              code.
                = ['asdf','qwer']|join
              | becomes
              code.
                asdf qwer = ['asdf','qwer']|join('-')
              | becomes
              code.
                asdf-qwer
            li
              b last:
              code.
                = ['asdf','qwer']|last
              | becomes
              code.
                qwer = ['asdf','qwer', 'zxcv']|last(2)|join('-')
              | becomes
              code.
                qwer-zxcv
            li
              b keys:
              code.
                {'asdf': 'foo','qwer': 'bar'}|keys
              | becomes the array
              code.
                ['asdf', 'qwer']
            li
              b length:
              code.
                = ['asdf','qwer']|length
              | becomes
              code.
                2
            li
              b lower:
              code.
                = "FOO BAR"|lower
              | becomes
              code.
                foo bar
            li
              b nl2br:
              code.
                = "new\nline"|nl2br
              | becomes
              code.
                new<br>line 
            li
              b round:
              code.
                = 12345.123|round(2)
              | becomes
              code.
                12345.12
            li
              b merge:
              code.
                ['foo', 'bar']|merge(['baz'])
              | becomes the array
              code.
                ['foo', 'bar', 'baz']
            li
              b replace:
              code.
                = "foo bar"|replace(' ', '-')
              | becomes
              code.
                foo-bar
            li
              b reverse:
              code.
                ['asdf', 'qwer']|reverse
              | becomes the array
              code.
                ['qwer', 'asdf']
            li
              b slice:
              code.
                ['foo', 'bar', 'baz']|slice(1, 1)
              | becomes the array
              code.
                ['bar']
            li
              b number_format:
              code.
                = 10000000000.12345|number_format()
              | becomes
              code.
                0,000,000,000 = 10000000000.12345|number_format(2, ',', '.')
              | becomes
              code.
                10.000.000.000,12
            li
              b ceil:
              code.
                = 10000000000.12345|ceil
              | becomes
              code.
                10000000001
            li
              b floor:
              code.
                = 10000000000.12345|floor
              | becomes
              code.
                10000000000
            li
              b relative:
              | if you had a
              code.
                timestamp
              | variable
              code.
                timestamp|relative
              | would return things like 'just now' or 'in 3 days' or
              code.
                6 minutes ago
            li
              b contains:
              code.
                = ['asdf', 'qwer']|contains('asdf')
              | returns TRUE
            li
              b is:
            ul
              li
                code.
                  = ['asdf', 'qwer']|is('list')
                | returns TRUE
              li
                code.
                  = {asdf: 'qwer'}|is('object')
                | returns TRUE
              li
                code.
                  = 8|is('number')
                | returns TRUE
              li
                code.
                  = myVariable|is('My_Class_Name')
                | also works
            li
              b json:
              code.
                = ['asdf', 'qwer']|json
              | returns
              code.
                "['asdf','qwer']"

// jQuery Version 1.11.0
script(src='vendor/twitter/bootstrap/dist/js/jquery-1.11.0.js')
// Bootstrap Core JavaScript
script(src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js")
// Plugin Javascript 
script(src="vendor/twitter/bootstrap/dist/js/jquery.easing.min.js")




